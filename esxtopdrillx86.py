import os
import time

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import wx

pd.set_option('max_colwidth', 0)
pd.set_option('display.max_rows', 999999)


# simple dialog
def dialog(message):
    wx.MessageBox(message, 'Information', wx.OK)
    return


# --------------------------------------------------------------

# warning dialog
def warning(message):
    wx.MessageBox(message, 'Warning', wx.OK | wx.ICON_WARNING)
    return


# --------------------------------------------------------------

# error dialog
def error(message):
    wx.MessageBox(message, 'Error', wx.OK | wx.ICON_ERROR)
    return


# ----------------------------------------------------------------

def get_file(what):
    frame = wx.Frame(None, -1, 'win.py')
    frame.SetSize(0, 0, 200, 50)
    openFileDialog = wx.FileDialog(frame, what, "", "", "CSV (*.csv)|*.csv", wx.FD_OPEN | wx.FD_FILE_MUST_EXIST)
    openFileDialog.ShowModal()
    return openFileDialog.GetPath()


# -------------------------------------------------------------------------

def get_dir(what):
    frame = wx.Frame(None, -1, 'win.py')
    frame.SetSize(0, 0, 200, 50)
    openFileDialog = wx.DirDialog(frame, what, "", style=wx.DD_DEFAULT_STYLE)
    openFileDialog.ShowModal()
    return openFileDialog.GetPath()


# -------------------------------------------------------------------------
def get_list(what, title):
    frame = wx.Frame(None, -1, 'win.py')
    frame.SetSize(0, 0, 200, 50)
    open_file_dialog = wx.TextEntryDialog(frame, what, title)
    open_file_dialog.ShowModal()
    out_list = open_file_dialog.GetValue()
    if out_list != '':
        out_list = list(out_list.split(','))
    else:
        out_list = list(out_list)
    return out_list


# ------------------------------------------------------------------------------
def read_working_dir():
    working_dir = get_dir("Working directory")
    dialog("All output files generated by the system will be stored at  %s" % working_dir)
    return working_dir


# --------------------------------------------------------------------------------
def prep_working_dir(dir_list, working_dir):
    for i in dir_list:
        if not (os.path.exists(os.path.join('./', working_dir, i))):
            os.makedirs(os.path.join('./', working_dir, i))
    return


# -------------------------------------------------------------------------
def read_csv_location():
    csv_location = get_file("Esxtop csv Data")
    return csv_location


# --------------------------------------------------------------------------
def load_csv(csv_location):
    try:
        print("Processing ", csv_location, " this may take a while")
        tdf = pd.DataFrame(pd.read_csv(csv_location))
        print("CSV file successfully loaded to Memory")
    except:
        error("file read Error. Make sure file is not in use")
    return tdf


# --------------------------------------------------------------------------
def filter_objects(working_dir, esxtop_data_frame):
    val_err = True
    while val_err:
        object_selection = get_list(
            "Do you know a name of object(VM name, Naa ID etc).Blank,In case you do not know the name of object.",
            "Object Filter")
        input_error = 0
        for i in object_selection:
            try:
                int(i)
                input_error = input_error + 1
            except ValueError:
                input_error = input_error
        if input_error > 0:
            error("Input Error String expected. Example Input: TestVM1,naa.123456789")
            val_err = True
        else:
            val_err = False
    cdf = pd.DataFrame(esxtop_data_frame.columns)
    cdf.columns = ['Objects']
    # Processing data based on user input1
    out_df = esxtop_data_frame
    if len(object_selection) != 0:
        column_list = []
        for Object in object_selection:
            column_list.extend(cdf.index[cdf['Objects'].str.contains(Object)].tolist())
            column_list.sort(reverse=False)
        col_name = []
        col_name.insert(0, cdf['Objects'][0])
        i = 1
        for col in column_list:
            col_name.insert(i, cdf['Objects'][col])
            i = i + 1
            out_df = esxtop_data_frame[col_name]

        col_name_df = pd.DataFrame(out_df.columns)
        # Validating data in Object filtered output
        if col_name_df[0].count() <= 1:
            error("Unable to find the objects specified.Program will exit")
            return
        outfile = str(object_selection[0] + str(int(time.time())) + ".csv")
        outfile = os.path.join(working_dir, outfile)
        out_df.to_csv(outfile, index=False)
        print("Generated: ", outfile)
    return out_df


# ------------------------------------------------------------------------------------

def prep_cg_selection(object_filtered_data_frame):
    col_name_df = pd.DataFrame(object_filtered_data_frame.columns)
    c_gn_c_df = col_name_df[0].str.split(("\\"), expand=True)
    cg_df = c_gn_c_df[3].str.split(("\("), expand=True)
    c_gn_c_df[3] = cg_df[0]
    counter_groups = pd.DataFrame(cg_df[0].unique())
    counter_groups.columns = ['Counter Groups']
    counter_groups = counter_groups.replace(to_replace='None', value=np.nan).dropna()
    selection_list = counter_groups['Counter Groups'].tolist()
    return selection_list


# -----------------------------------------------------------------------------------------
def plotit(c_sel, filepath, c_filtred_data_frame, cg_sel):
    pname = c_sel.split("\\")
    pname = pname[3] + '-' + pname[4]
    pname = str('Plot-' + pname + '-' + str(int(time.time())) + '.png')
    pname = os.path.join(filepath, cg_sel, pname)
    plotdf = c_filtred_data_frame
    xdata = '(PDH-CSV 4.0) (UTC)(0)'
    Ydata = c_sel
    Fig_len = int(len(plotdf[xdata])) * 0.24
    Fig_Wid = Fig_len * 0.5625
    if Fig_Wid > 5:
        Fig_Wid = 5
    plt.figure()
    plt.figure(figsize=(Fig_len, Fig_Wid))
    plt.autoscale(enable=True, axis='both', tight=False)
    plt.xlabel('Time')
    plt.ylabel('Value')
    plt.title(Ydata)
    plt.xticks(rotation='vertical')
    plt.plot(plotdf[xdata], plotdf[Ydata])
    try:
        plt.savefig(pname, bbox_inches="tight")
        print("Generated:", pname)
    except OSError:
        fname = c_sel.split("\\")
        fname = fname[3].replace(":", "-") + "-" + fname[4]
        fname = fname.replace("?", " ")
        pname = str('Plot-' + fname + '-' + str(int(time.time())) + '.png')
        try:
            fname = os.path.join(filepath, cg_sel, pname)
            plt.savefig(fname, bbox_inches="tight")
            print("Generated:", fname)
        except FileNotFoundError:
            pname = pname.replace("/", "-")
            fname = os.path.join(filepath, cg_sel, pname)
            plt.savefig(fname, bbox_inches="tight")
            print("Generated:", fname)
    plt.show()
    return


# --------------------------------------------------------------------------------------

def filer_counter_group(object_filtered_data_frame, cg_selection, working_dir):
    col_name_df = pd.DataFrame(object_filtered_data_frame.columns)
    c_gn_c_df = col_name_df[0].str.split(("\\"), expand=True)
    cg_df = c_gn_c_df[3].str.split(("\("), expand=True)
    c_gn_c_df[3] = cg_df[0]
    column_list = [0]
    column_list.extend(c_gn_c_df.index[c_gn_c_df[3] == cg_selection].tolist())
    column_list.sort(reverse=False)
    col_name = []
    i = 0
    for col in column_list:
        col_name.insert(i, col_name_df[0][col])
        i = i + 1
    out_df = object_filtered_data_frame[col_name]
    outfile = str(cg_selection + "-" + str(int(time.time())) + ".csv")
    outfile = os.path.join(working_dir, cg_selection, outfile)
    out_df.to_csv(outfile, index=False)
    print("Generated: ", outfile)
    return out_df


# ------------------------------------------------------------------------------------------

def filer_counter(cg_filtered_data_frame, c_selection, cg_selection, working_dir):
    out_df = cg_filtered_data_frame
    col_name_df = pd.DataFrame(cg_filtered_data_frame.columns)
    time_se = str(col_name_df[0][0])
    col_name_df = col_name_df.drop([0])
    c_gn_c_df = col_name_df[0].str.split(("\\"), expand=True)
    column_list = list()
    column_list.extend(c_gn_c_df.index[c_gn_c_df[4] == c_selection].tolist())
    column_list.sort(reverse=False)
    col_name = list()
    col_name.append(time_se)
    i = 1
    for Col in column_list:
        col_name.insert(i, col_name_df[0][Col])
        i = i + 1
    out_df = out_df[col_name]
    outfile = str(cg_selection + "-" + c_selection + "-" + str(int(time.time())) + ".csv")
    outfile = os.path.join(working_dir, cg_selection, outfile)
    try:
        out_df.to_csv(outfile, index=False)
    except (FileNotFoundError, OSError):
        outfile = str(cg_selection + "-" + c_selection + "-" + str(int(time.time())) + ".csv")
        outfile = outfile.replace("/", "-")
        outfile = outfile.replace("?", " ")
        outfile = os.path.join(working_dir, cg_selection, outfile)
        out_df.to_csv(outfile, index=False)
    print("Generated: ", outfile)
    return out_df


# ------------------------------------------------------------------------------------------

class MyCombo(wx.Frame):
    c_sel_list = ['Not Set', 'Select Counter Group']
    plt_sel_list = ['Not Set', 'Select Counter']
    tmp_df_cg_filtered = pd.DataFrame()
    tmp_df_c_filtered = pd.DataFrame()

    def __init__(self, cg_list, working_dir, object_filtered_data_frame):
        self.working_dir = working_dir
        self.object_filtered_data_frame = object_filtered_data_frame
        wx.Frame.__init__(self, None, title="Selection Panel", size=(600, 300))
        panel = wx.Panel(self)
        box = wx.BoxSizer(wx.VERTICAL)

        self.label = wx.StaticText(panel, label="Your choice:", style=wx.ALIGN_CENTRE)
        box.Add(self.label, 0, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 20)

        chlbl = wx.StaticText(panel, label="Counter Groups", style=wx.ALIGN_CENTRE)

        box.Add(chlbl, 0, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)
        self.choice = wx.Choice(panel, choices=cg_list)
        box.Add(self.choice, 1, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)

        chlbl_1 = wx.StaticText(panel, label="Counters", style=wx.ALIGN_CENTRE)
        box.Add(chlbl_1, 0, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)
        self.choice_1 = wx.Choice(panel, choices=self.c_sel_list)
        box.Add(self.choice_1, 1, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)

        chlbl_2 = wx.StaticText(panel, label="What would you like to plot", style=wx.ALIGN_CENTRE)

        box.Add(chlbl_2, 0, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)
        self.choice_2 = wx.Choice(panel, choices=self.plt_sel_list)
        box.Add(self.choice_2, 1, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)

        box.AddStretchSpacer()
        self.choice.Bind(wx.EVT_CHOICE, self.OnChoice)
        self.choice_1.Bind(wx.EVT_CHOICE, self.OnChoice_1)
        self.choice_2.Bind(wx.EVT_CHOICE, self.OnChoice_2)

        panel.SetSizer(box)
        self.Centre()
        self.Show()

    # -----------------------------------------------------------------------------------

    def OnChoice(self, event):
        cg_selection = self.choice.GetString(self.choice.GetSelection())
        data_frame = filer_counter_group(self.object_filtered_data_frame, cg_selection, self.working_dir)
        self.prep_counter_list(data_frame)
        self.choice_1.Clear()
        self.choice_1.AppendItems(self.c_sel_list)
        self.update_tmp_df(data_frame, 'cg')

    # -------------------------------------------------------------------------------------

    def OnChoice_1(self, event):
        cg_selection = self.choice.GetString(self.choice.GetSelection())
        c_selection = self.choice_1.GetString(self.choice_1.GetSelection())
        data_frame = filer_counter(self.tmp_df_cg_filtered, c_selection, cg_selection, self.working_dir)
        self.prep_plt_list(data_frame)
        self.choice_2.Clear()
        self.choice_2.AppendItems(self.plt_sel_list)
        self.update_tmp_df(data_frame, 'c')

    # -------------------------------------------------------------------------------------

    def OnChoice_2(self, event):
        data_frame = self.tmp_df_c_filtered
        cg_selection = self.choice.GetString(self.choice.GetSelection())
        plt_selection = self.choice_2.GetString(self.choice_2.GetSelection())
        plotit(plt_selection, self.working_dir, data_frame, cg_selection)

    # -------------------------------------------------------------------------------------
    @classmethod
    def prep_counter_list(self, cg_filtered_data_frame):
        col_name_df = pd.DataFrame(cg_filtered_data_frame.columns)
        col_name_df = col_name_df.drop([0])
        col_name_df = col_name_df[0].str.split(("\\"), expand=True)
        self.c_sel_list = list(col_name_df[4].unique())

    # --------------------------------------------------------------------------------------
    @classmethod
    def prep_plt_list(self, c_filtered_data_frame):
        col_name_df = pd.DataFrame(c_filtered_data_frame.columns)
        col_name_df = col_name_df.drop([0])
        self.plt_sel_list = list(col_name_df[0].unique())

    # --------------------------------------------------------------------------------------
    @classmethod
    def update_tmp_df(self, tmp_df, df_type):
        if df_type == 'cg':
            self.tmp_df_cg_filtered = tmp_df
        if df_type == 'c':
            self.tmp_df_c_filtered = tmp_df
    # --------------------------------------------------------------------------------------


app = wx.App()
working_dir = read_working_dir()
data = load_csv(read_csv_location())
data = filter_objects(working_dir, data)
cg_selection = prep_cg_selection(data)
prep_working_dir(cg_selection, working_dir)
MyCombo(cg_selection, working_dir, data)
app.MainLoop()
app.ExitMainLoop()
